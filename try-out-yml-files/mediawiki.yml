---
- hosts: all
  become: true
  vars_files:
    - vars/default.yml

  tasks:
    #Apache Configuration
    - name: Install LAMP Packages
      dnf: name={{ item }} update_cache=no state=latest
      loop: [ 'php-mysqlnd', 'php-fpm', 'mariadb-server','httpd' ]

    - name: Create document root
      file:
         path: "/var/www/{{ http_folder }}"
         state: directory
         owner: "{{ app_user }}"
         mode: '0755'

    # - name: Set up Apache virtualhost
    #   template:
    #     src: "files/httpd.conf.j2"
    #     dest: "/etc/httpd/conf/{{ http_conf }}"
    #   notify: Reload Apache

    - name: install firewalld
      dnf:
        name: firewalld
        state: present

    - name: Open port 80 for http access
      firewalld:
        service: http
        permanent: true
        state: enabled

    - name: Open port 443 for https access
      firewalld:
        service: https
        permanent: true
        state: enabled

    - name: Restart the firewalld service to load in the firewall changes
      service:
        name: firewalld
        state: restarted

    - name: Make sure a service unit is running
      ansible.builtin.systemd:
         state: started
         name: httpd

    - name: Enable service httpd and ensure it is not masked
      ansible.builtin.systemd:
         name: httpd
         enabled: yes
         masked: no

    - name: Creating a file with content
      copy:
        dest: "/var/www/html/index.html"
        content: |
            "Welcome to this site!"


    - name: create directory for virtual hosts
      template:
        src: "files/httpd.conf.j2"
        dest: "/etc/httpd/conf/{{ http_conf }}"
      notify: Reload Apache

    - name: Set up Apache virtualhost
      file:
        path: /var/www/{{http_host}}
        state: directory

    #
    # - name: Change file ownership, group and permissions
    #   ansible.builtin.file:
    #     path: /var/www/html
    #     owner: apache
    #     group: apache
    #     mode: '0644'

    - name: Make sure a mariadb service unit is running
      ansible.builtin.systemd:
        state: started
        name: mariadb

    - name: Make sure a mariadb service unit is enabled
      ansible.builtin.systemd:
        name: mariadb
        enabled: yes
        masked: no

# MySQL Configuration

    - name: Install python3-PyMySQL library
      dnf:
        name: python3-PyMySQL
        state: present

    - name: Set MySQL root Password
      mysql_user:
        login_host: 'localhost'
        login_user: 'root'
        login_password: ''
        name: 'root'
        password: '{{ mysql_root_password }}'
        state: present


# Php7.4 Configuration

    # - name: Add repository epel
    #   dnf:
    #    name: 'https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm'
    #    state: present

    # - name: Add repository remi
    #   dnf:
    #    name: 'https://rpms.remirepo.net/enterprise/remi-release-8.rpm'
    #    state: present

    - name: Import EPEL GPG key
      rpm_key:
        key: "{{ fusioninventory__repo_gpgkey }}"
        state: present

    - name: Add EPEL Repository
      yum:
        name: "{{ fusioninventory__repo_package }}"
        state: present

    - name: Install dnf-utils library
      dnf:
        name: dnf-utils
        state: present

    # - block:
    #   - name: "Retrieve remote php module file"
    #     fetch:
    #      src: "/etc/dnf/modules.d/{{ php_module_name }}.module"
    #      dest: /tmp/ansible
    #     changed_when: false
    #
    # - name: "Read stream from {{ php_module_name }} module"
    #   set_fact:
    #     current_stream: "{{ lookup( 'ini', 'stream section={{ php_module_name }} file=/tmp/ansible/{{ inventory_hostname }}/etc/dnf/modules.d/{{ php_module_name }}.module' ) }}"
    #
    # - name: "Remove existing {{ php_module_name }}"
    #   dnf:
    #     name: "{{ php_module_name }}"
    #     state: absent
    #   when: current_stream != php_desired_stream
    #
    # - name: reset {{ php_module_name }} module
    #   command: "dnf module reset -y {{ php_module_name }}"
    #   args:
    #     warn: false
    #   when:
    #    - current_stream != php_desired_stream
    #
    # - name: "Enable {{ php_module_name }}:{{ php_desired_stream }} module"
    #   command: "dnf module enable -y {{ php_module_name }}:{{ php_desired_stream }}"
    #   args:
    #     warn: false
    #   register: dnf_module_php_enabled
    #   when: current_stream != php_desired_stream
    #
    # - name: Install {{ php_module_name }} {{ php_version }} from {{ php_desired_stream }}
    #   dnf:
    #     enablerepo: "{{ php_desired_repo }}"
    #     name: "@{{ php_module_name }}:{{ php_desired_stream }}"
    #     state: present
    #   when: dnf_module_php_enabled
    #
    # - name: Installing additional PHP packages
    #   dnf:
    #     name: "{{ php_packages }}"
    #     update_cache: yes
    #   when: current_stream != php_desired_stream

    #Install php Configuration
    - name: Install PhP Packages
      dnf: name={{ item }} update_cache=yes state=latest
      loop: [ 'php', 'php-fpm', 'php-mysqlnd','php-opcache','php-gd','php-xml','php-mbstring' ]

    - name: Make sure a php-fm service unit is running
      ansible.builtin.systemd:
        state: started
        name: php-fpm

    - name: Make sure a php-fm service unit is enabled
      ansible.builtin.systemd:
        name: php-fpm
        enabled: yes
        masked: no

    - name: Reload service httpd, in all cases
      ansible.builtin.systemd:
        name: httpd.service
        state: reloaded

    # PHP Info Page
    - name: Sets Up PHP Info Page
      template:
        src: "files/info.php.j2"
        dest: "/var/www/{{ http_host }}/info.php"

    - name: Creating a file with content
      copy:
        dest: "/var/www/html/info.php"
        content: |
            "<?php
              phpinfo();?>"

    - name: Transfer the script
      copy: src=install_module.sh dest=/home/ec2-user mode=0777

    - name: Execute the script
      command: sh /home/ec2-user/install_module.sh


    - name: Create user
      community.mysql.mysql_user:
        name: 'wiki'
        password: '{{ wiki_user_password }}'
        login_host: 'localhost'
        login_user: 'root'
        login_password: '{{ mysql_root_password }}'
        state: present

    - name: Create a new database
      mysql_db:
        name: 'wikidatabase'
        state: present
        login_host: 'localhost'
        login_user: 'root'
        login_password: "{{ mysql_root_password }}"

    - name: Transfer the script
      copy: src=install_mediawiki.sh dest=/home/ec2-user mode=0777

    - name: Execute the script
      command: sh /home/ec2-user/install_mediawiki.sh


    - name: Copy LoclaSetting.php file with owner and permissions
      ansible.builtin.copy:
        src: /home/ubuntu/ansible-playbooks/lamp_ubuntu1804/LocalSettings.php
        dest: /var/www/html/mediawiki
        owner: apache
        group: apache
        mode: '0664'

  handlers:
    - name: Reload Apache
      service:
        name: httpd
        state: reloaded

    - name: Restart Apache
      service:
        name: httpd
        state: restarted
